'use client';

import { useEffect, useRef } from 'react';
import { useRouter } from 'next/navigation';
import apiClient, { getTokenFromCookie, removeTokenFromCookie } from '@/lib/api';

/**
 * Hook –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
 */
export function useTokenRefresh() {
  const router = useRouter();
  const intervalRef = useRef<NodeJS.Timeout | null>(null);
  const isRefreshingRef = useRef(false);

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ cookie –∏–ª–∏ localStorage
   * @returns Date –æ–±—ä–µ–∫—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è –∏–ª–∏ null
   */
  const getTokenExpiration = (): Date | null => {
    if (typeof window === 'undefined') return null;

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ localStorage
    const expiresAtStr = localStorage.getItem('admin-token-expires-at');
    
    if (expiresAtStr) {
      try {
        const expiresAt = new Date(expiresAtStr);
        if (!isNaN(expiresAt.getTime())) {
          return expiresAt;
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ expires_at –∏–∑ localStorage:', error);
      }
    }

    // –ï—Å–ª–∏ –≤ localStorage –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ cookie
    const cookies = document.cookie.split(';');
    for (const cookie of cookies) {
      const [name, value] = cookie.trim().split('=');
      if (name === 'admin-token-expires-at') {
        try {
          const expiresAt = new Date(decodeURIComponent(value));
          if (!isNaN(expiresAt.getTime())) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            localStorage.setItem('admin-token-expires-at', expiresAt.toISOString());
            return expiresAt;
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ expires_at –∏–∑ cookie:', error);
        }
      }
    }

    return null;
  };

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ localStorage –∏ cookie
   * @param expiresAt - –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
   */
  const saveTokenExpiration = (expiresAt: Date): void => {
    if (typeof window === 'undefined') return;

    const expiresAtStr = expiresAt.toISOString();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('admin-token-expires-at', expiresAtStr);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ cookie
    const maxAge = Math.floor((expiresAt.getTime() - Date.now()) / 1000);
    if (maxAge > 0) {
      document.cookie = `admin-token-expires-at=${encodeURIComponent(expiresAtStr)}; path=/; max-age=${maxAge}`;
    }
  };

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
   * @returns true –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å (–æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 30 –º–∏–Ω—É—Ç)
   */
  const shouldRefreshToken = (): boolean => {
    const expiresAt = getTokenExpiration();
    
    if (!expiresAt) {
      return false;
    }

    const now = new Date();
    const timeUntilExpiration = expiresAt.getTime() - now.getTime();
    const thirtyMinutesInMs = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 30 –º–∏–Ω—É—Ç
    return timeUntilExpiration > 0 && timeUntilExpiration <= thirtyMinutesInMs;
  };

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API
   */
  const refreshToken = async (): Promise<void> => {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (isRefreshingRef.current) {
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }

    const token = getTokenFromCookie();
    
    if (!token) {
      console.log('üö´ –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞');
      removeTokenFromCookie();
      localStorage.removeItem('admin-token-expires-at');
      router.push('/admin/login');
      return;
    }

    try {
      isRefreshingRef.current = true;
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...');

      // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ª—é–±–æ–º—É –∑–∞—â–∏—â—ë–Ω–Ω–æ–º—É endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
      // Backend middleware –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω—ë—Ç –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ X-New-Token
      const response = await apiClient.get('/api/admin/me');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
      const newToken = response.headers['x-new-token'];
      const newExpiresAt = response.headers['x-token-expires-at'];
      
      if (newToken) {
        console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω');
        
        // –¢–æ–∫–µ–Ω —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ cookie —á–µ—Ä–µ–∑ response interceptor –≤ api.ts
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
        let expiresAt: Date;
        
        if (newExpiresAt) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –∏–∑ backend
          expiresAt = new Date(newExpiresAt);
        } else {
          // Fallback: 8 —á–∞—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          expiresAt = new Date();
          expiresAt.setHours(expiresAt.getHours() + 8);
        }
        
        saveTokenExpiration(expiresAt);
      } else {
        console.log('‚ÑπÔ∏è –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω, —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω –µ—â—ë –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
      
      // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 401, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
      if (error && typeof error === 'object' && 'response' in error) {
        const axiosError = error as { response?: { status: number } };
        if (axiosError.response?.status === 401) {
          console.log('üö´ –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞');
          removeTokenFromCookie();
          localStorage.removeItem('admin-token-expires-at');
          router.push('/admin/login');
        }
      }
    } finally {
      isRefreshingRef.current = false;
    }
  };

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   */
  const checkAndRefreshToken = async (): Promise<void> => {
    const token = getTokenFromCookie();
    
    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –Ω–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
    if (!token) {
      return;
    }

    const expiresAt = getTokenExpiration();
    
    if (!expiresAt) {
      console.log('‚ö†Ô∏è –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    const now = new Date();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç—ë–∫ –ª–∏ —Ç–æ–∫–µ–Ω
    if (now >= expiresAt) {
      console.log('‚è∞ –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞');
      removeTokenFromCookie();
      localStorage.removeItem('admin-token-expires-at');
      router.push('/admin/login');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
    if (shouldRefreshToken()) {
      console.log('üîÑ –¢–æ–∫–µ–Ω —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á—ë—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
      await refreshToken();
    }
  };

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —Å—Ä–∞–∑—É –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    checkAndRefreshToken();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    intervalRef.current = setInterval(() => {
      checkAndRefreshToken();
    }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç

    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [router]);

  return {
    refreshToken,
    checkAndRefreshToken,
    getTokenExpiration,
    saveTokenExpiration,
  };
}
