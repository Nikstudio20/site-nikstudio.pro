import { Service, Step, TestimonialLegacy } from '@/types/media';

/**
 * Transform API media page data to match existing component interfaces
 */
export const transformMediaPageData = (apiData: any) => {
  console.log('üîÑ –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
  console.log('üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API:', JSON.stringify(apiData, null, 2));

  // Transform services to match existing ServiceSection component interface
  const transformedServices: Service[] = apiData.services.map((service: any) => ({
    id: service.id,
    title: service.title,
    description: service.description,
    slides: transformMediaToSlides(service.media || []),
    features: service.features.map((feature: any) => ({
      title: feature.title,
      description: feature.description
    })),
    darkBackground: service.darkBackground
  }));

  // Transform testimonials to match existing component interface
  console.log('üë• –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤...');
  console.log('üìù –ò—Å—Ö–æ–¥–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –∏–∑ API:', JSON.stringify(apiData.testimonials, null, 2));
  
  const transformedTestimonials: TestimonialLegacy[] = apiData.testimonials.items.map((testimonial: any, index: number) => {
    console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–∞ ${index + 1}:`, {
      id: testimonial.id,
      company: testimonial.company,
      originalImage: testimonial.image,
      imageExists: !!testimonial.image
    });
    
    const transformedImage = testimonial.image ? addStoragePrefix(testimonial.image) : '';
    console.log(`üñºÔ∏è –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–∑—ã–≤–∞ ${index + 1}:`, transformedImage);
    
    return {
      company: testimonial.company,
      quote: testimonial.quote,
      text: testimonial.description, // API uses 'description' instead of 'text'
      image: transformedImage
    };
  });
  
  console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤:', JSON.stringify(transformedTestimonials, null, 2));

  // Transform process steps to match existing component interface
  const transformedProcessSteps: Step[] = apiData.process.steps.map((step: any) => ({
    id: step.stepNumber,
    title: step.title,
    subtitle: step.subtitle,
    image: addStoragePrefix(step.image),
    description: {
      left: step.descriptionLeft,
      right: step.descriptionRight
    }
  }));

  const finalData = {
    services: transformedServices,
    testimonials: transformedTestimonials,
    testimonialsData: {
      title: apiData.testimonials.title,
      subtitle: apiData.testimonials.subtitle
    },
    processData: {
      title: apiData.process.title,
      subtitle: apiData.process.subtitle,
      steps: transformedProcessSteps
    },
    heroData: {
      title: apiData.hero.title,
      description: apiData.hero.description
    }
  };

  console.log('üéØ –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(finalData, null, 2));
  console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', finalData.testimonials.length);
  
  return finalData;
};

/**
 * Transform media array to slides format
 */
const transformMediaToSlides = (mediaArray: any[]) => {
  return mediaArray.map((mediaGroup: any) => {
    // Transform main media
    const mainMedia = mediaGroup.main;
    const mainImage = addStoragePrefix(mainMedia?.src || '');
    const mainPoster = mainMedia?.poster ? addStoragePrefix(mainMedia.poster) : null;
    
    // Transform secondary media (get first secondary item)
    const secondaryArray = mediaGroup.secondary || [];
    const firstSecondary = Array.isArray(secondaryArray) ? secondaryArray[0] : secondaryArray;
    const secondaryImage = addStoragePrefix(firstSecondary?.src || '');
    const secondaryPoster = firstSecondary?.poster ? addStoragePrefix(firstSecondary.poster) : null;
    
    return {
      mainImage,
      mainPoster,
      mainType: mainMedia?.type || 'image',
      secondaryImage,
      secondaryPoster,
      secondaryType: firstSecondary?.type || 'image'
    };
  });
};

/**
 * Add storage prefix to file paths for Laravel images
 */
const addStoragePrefix = (filePath: string | null): string => {
  if (!filePath) {
    console.warn('‚ö†Ô∏è –ü—É—Å—Ç–æ–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é');
    return '';
  }
  
  // –ï—Å–ª–∏ —É–∂–µ –ø–æ–ª–Ω—ã–π URL, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (filePath.startsWith('http://') || filePath.startsWith('https://')) {
    console.log('üîó –ü–æ–ª–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', filePath);
    return filePath;
  }
  
  // –ï—Å–ª–∏ —É–∂–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /storage/, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π URL
  if (filePath.startsWith('/storage/')) {
    const laravelStorageUrl = `${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}${filePath}`;
    console.log('üìÅ URL —Å /storage/ –ø—Ä–µ—Ñ–∏–∫—Å–æ–º:', laravelStorageUrl);
    return laravelStorageUrl;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º Laravel storage URL —Å –ø–æ–ª–Ω—ã–º –ø—É—Ç–µ–º
  const laravelStorageUrl = `${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}/storage/${filePath}`;
  console.log('üñºÔ∏è –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', laravelStorageUrl);
  return laravelStorageUrl;
};

/**
 * Fallback data when API is unavailable
 */
export const getFallbackMediaData = () => {
  return {
    services: [] as Service[],
    testimonials: [] as TestimonialLegacy[],
    testimonialsData: {
      title: "–≥–æ–≤–æ—Ä—è—Ç –æ –Ω–∞—Å",
      subtitle: "–ö–æ–º–∞–Ω–¥–∞ NIKstudio –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Ü–µ–ª—ã–π —Ä—è–¥ –∑–∞–¥–∞—á —Å —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º –∏ –ø–æ–ª–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é"
    },
    processData: {
      title: "–ø—Ä–æ—Ü–µ—Å—Å",
      subtitle: "–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã —Å—Ç—Ä–æ–∏—Ç—Å—è –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ–¥ –µ–¥–∏–Ω—ã–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º",
      steps: [] as Step[]
    },
    heroData: {
      title: "–ú–ï–î–ò–ê",
      description: "–°–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç—ã –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏"
    }
  };
};