import axios from 'axios';

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π API –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å backend
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –æ—à–∏–±–∫–∏
 */

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ cookie
const getTokenFromCookie = (): string | null => {
  if (typeof document === 'undefined') return null;
  
  const cookies = document.cookie.split(';');
  for (const cookie of cookies) {
    const [name, ...valueParts] = cookie.trim().split('=');
    if (name === 'admin-token') {
      // Join back in case token contains '=' characters
      const value = valueParts.join('=');
      return decodeURIComponent(value);
    }
  }
  return null;
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ cookie
const saveTokenToCookie = (token: string, maxAge?: number): void => {
  if (typeof document === 'undefined') return;
  
  const age = maxAge || 60 * 60 * 8; // 8 —á–∞—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  document.cookie = `admin-token=${token}; path=/; max-age=${age}`;
};

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ cookie
const removeTokenFromCookie = (): void => {
  if (typeof document === 'undefined') return;
  
  document.cookie = 'admin-token=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT';
};

// –°–æ–∑–¥–∞–Ω–∏–µ axios instance
const apiClient = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000',
  withCredentials: true,
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  },
  timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥
});

// Request interceptor - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏
apiClient.interceptors.request.use(
  (config: any) => {
    const token = getTokenFromCookie();
    
    console.log('[API Client] Request interceptor:', {
      url: config.url,
      method: config.method,
      hasToken: !!token,
      tokenPreview: token ? `${token.substring(0, 20)}...` : 'none',
      isFormData: config.data instanceof FormData
    });
    
    if (token && config.headers) {
      config.headers.Authorization = `Bearer ${token}`;
      console.log('[API Client] Authorization header added');
    } else if (!token) {
      console.warn('[API Client] No token found in cookies!');
    }
    
    // –î–ª—è FormData —É–¥–∞–ª—è–µ–º Content-Type, —á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π boundary
    if (config.data instanceof FormData && config.headers) {
      delete config.headers['Content-Type'];
      console.log('[API Client] Content-Type removed for FormData');
    }
    
    return config;
  },
  (error: any) => {
    console.error('[API Client] Request interceptor error:', error);
    return Promise.reject(error);
  }
);

// Response interceptor - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –æ—à–∏–±–æ–∫
apiClient.interceptors.response.use(
  (response: any) => {
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ X-New-Token
    const newToken = response.headers['x-new-token'];
    const newExpiresAt = response.headers['x-token-expires-at'];
    
    if (newToken) {
      console.log('[API Client] üîÑ –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º cookie');
      
      // –í—ã—á–∏—Å–ª—è–µ–º max-age –∏–∑ expires_at
      let maxAge = 60 * 60 * 8; // 8 —á–∞—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      
      if (newExpiresAt) {
        const expiresAt = new Date(newExpiresAt);
        const now = new Date();
        const diffInSeconds = Math.floor((expiresAt.getTime() - now.getTime()) / 1000);
        
        if (diffInSeconds > 0) {
          maxAge = diffInSeconds;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–ª—è useTokenRefresh hook
        if (typeof window !== 'undefined') {
          localStorage.setItem('admin-token-expires-at', expiresAt.toISOString());
          document.cookie = `admin-token-expires-at=${encodeURIComponent(expiresAt.toISOString())}; path=/; max-age=${maxAge}`;
        }
      }
      
      saveTokenToCookie(newToken, maxAge);
    }
    
    return response;
  },
  (error: any) => {
    console.error('[API Client] Response error:', {
      url: error.config?.url,
      status: error.response?.status,
      statusText: error.response?.statusText,
      message: error.message,
      data: error.response?.data
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ 401 –æ—à–∏–±–∫–∏ - –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if (error.response?.status === 401) {
      console.log('[API Client] üö´ –û—à–∏–±–∫–∞ 401: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞');
      
      // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω
      removeTokenFromCookie();
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
      if (typeof window !== 'undefined' && !window.location.pathname.includes('/admin/login')) {
        window.location.href = '/admin/login';
      }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ 403 –æ—à–∏–±–∫–∏ - –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω
    if (error.response?.status === 403) {
      console.log('üö´ –û—à–∏–±–∫–∞ 403: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
      
      // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (typeof window !== 'undefined') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π alert, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ toast –±–∏–±–ª–∏–æ—Ç–µ–∫—É
        alert('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.');
      }
    }
    
    return Promise.reject(error);
  }
);

// –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö HTTP –º–µ—Ç–æ–¥–æ–≤

/**
 * GET –∑–∞–ø—Ä–æ—Å
 */
export const get = async <T = any>(url: string, config?: any): Promise<T> => {
  const response = await apiClient.get<T>(url, config);
  return response.data;
};

/**
 * POST –∑–∞–ø—Ä–æ—Å
 */
export const post = async <T = any>(url: string, data?: any, config?: any): Promise<T> => {
  const response = await apiClient.post<T>(url, data, config);
  return response.data;
};

/**
 * PUT –∑–∞–ø—Ä–æ—Å
 */
export const put = async <T = any>(url: string, data?: any, config?: any): Promise<T> => {
  const response = await apiClient.put<T>(url, data, config);
  return response.data;
};

/**
 * DELETE –∑–∞–ø—Ä–æ—Å
 */
export const del = async <T = any>(url: string, config?: any): Promise<T> => {
  const response = await apiClient.delete<T>(url, config);
  return response.data;
};

/**
 * PATCH –∑–∞–ø—Ä–æ—Å
 */
export const patch = async <T = any>(url: string, data?: any, config?: any): Promise<T> => {
  const response = await apiClient.patch<T>(url, data, config);
  return response.data;
};

// –≠–∫—Å–ø–æ—Ä—Ç axios instance –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
export default apiClient;

// –≠–∫—Å–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏
export { getTokenFromCookie, saveTokenToCookie, removeTokenFromCookie };
